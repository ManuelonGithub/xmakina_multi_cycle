

Memory controller: (wishbone master)
	internal signals:
		control:
			cmd_i  -> 3-bit signal:
				| r/w | byte sel |
				|  0  |  0    0  |	-> res
				|  0  |  0    1  |  -> Read address' low byte
				|  0  |  1    0  |  -> read address' high byte
				|  0  |  1    1  |  -> Adress address word
				|  1  |  0    0  |	-> res
				|  1  |  0    1  |  -> Write address' low byte
				|  1  |  1    0  |  -> Write address' high byte
				|  1  |  1    1  |  -> Write address word
			en_i   -> when asserted it starts a data transfer cycle. Ignored while busy_o is asserted.

			busy_o -> Asserted while controller is in a transfer cycle
		datapath:
			addr_i -> 15-bit ; Data transfer address
			data_i -> 16-bit ; Write transfer data
			
			data_o -> 16-bit ; Read Transfer data
	Bus signals:
		control:
			we_o  -> 0 = read transfer, 1 = write transfer
			sel_o -> 2-bit signal: selects which byte lane is active/valid in a transfer
			stb_o -> strobe signal. Asserted to enable a data transfer phase *
			ack_i -> Asswerted when the slave has finished its side of the data transfer
			cyc_o -> Cycle signal. Asserted to enable a data tansfer cycle *

			*****
				there can be many phases in a single D.T. cycle. 
				For a single D.T. (read or write), 
				STB & CYC are asserted at the same time & for the same duration.
			*****
		datapath:
			adr_o -> 15-buts ; data transfer address 
			dat_i -> data from slave (read)
			dat_o -> data to slave (write)

address control unit:
addr_i -> 16-bit ; Data transfer address
size_i -> 0 = word transfer, 1 = byte transfer
rw_i   -> 0 = read, 1 = write
cmd_o  -> 3-bit control signal ;
	| r/w | byte sel |
	|  0  |  0    0  |	-> res
	|  0  |  0    1  |  -> rw_i = 0, size_i = 1, addr_i[0] = 0
	|  0  |  1    0  |  -> rw_i = 0, size_i = 1, addr_i[0] = 1
	|  0  |  1    1  |  -> rw_i = 0, size_i = 0, addr_i[0] = 0
	|  1  |  0    0  |	-> res
	|  1  |  0    1  |  -> rw_i = 1, size_i = 1, addr_i[0] = 0
	|  1  |  1    0  |  -> rw_i = 1, size_i = 1, addr_i[0] = 1
	|  1  |  1    1  |  -> rw_i = 1, size_i = 1, addr_i[0] = 0
bad_addr_o -> asserted when: size_i = 0 & addr_i[0] = 1
exc_ret_o  -> asserted when addr_i == pre-define exc_ret value